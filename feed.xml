<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://theseus-os.github.io/blog/" version="0.1.0">Theseus OS Blog</generator>
    <link href="https://theseus-os.github.io/blog/feed.xml" rel="self" type="application/atom+xml" />
    <link href="https://theseus-os.github.io/blog/" rel="alternate" type="text/html" />
    <id>https://theseus-os.github.io/blog/</id>
    <title>Theseus OS Blog</title>
    <subtitle>Status updates and info about Theseus OS development.</subtitle>
    <author>
        <name>Maintained by Kevin Boos and the Theseus OS Maintainers.</name>
        <uri>https://github.com/theseus-os/blog/</uri>
    </author>
    <updated>2022-05-09T21:17:12+00:00</updated>

    
    <entry>
        <title>Theseus is Hiring!</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2022/04/29/Theseus-Is-Hiring.html" type="text/html" title="Theseus is Hiring!" />
        <published>2022-04-29T00:00:00+00:00</published>
        <updated>2022-04-29T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2022/04/29/Theseus-Is-Hiring.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2022/04/29/Theseus-Is-Hiring.html">&lt;h2&gt;&lt;a href&#x3D;&quot;#theseus-is-looking-for-systems-programmers&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theseus-is-looking-for-systems-programmers&quot;&gt;&lt;/a&gt;Theseus is looking for systems programmers!&lt;/h2&gt;
&lt;p&gt;Theseus is proud to be a member of a diverse ecosystem of open-source Rust projects sponsored by Futurewei Technologies.
Thanks to the generosity of Futurewei&#x27;s Rust initiative, Theseus is able to hire developers for the first time!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To apply, send your resume or C.V. to &lt;a href&#x3D;&quot;mailto:theseus.systems@gmail.com&quot;&gt;theseus.systems@gmail.com&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Check out the below sections for more info.&lt;/p&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;/images/2022-posts/theseus_plus_futurewei.svg&quot; alt&#x3D;&quot;Theseus plus Futurewei&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#job-title-operating-systems-developer&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;job-title-operating-systems-developer&quot;&gt;&lt;/a&gt;Job Title: Operating Systems Developer&lt;/h3&gt;
&lt;p&gt;As an OS developer, you will independently lead a major development project within Theseus OS.&lt;/p&gt;
&lt;p&gt;To lend some context, Theseus OS is a novel operating system written from scratch entirely in Rust,
with the objective of realizing next-generation safety and efficiency guarantees for workloads in a variety of execution environments.
Theseus&#x27;s goals span the gamut: everything from supporting cutting-edge exploratory research topics to more practical concerns of achieving legacy compatibility and usability.&lt;/p&gt;
&lt;p&gt;Lately, our focus is on deep support for WebAssembly (WASM) interfaces and runtimes, as well as porting Theseus to additional architectures (e.g., ARM).
As such, your development project (&lt;a href&#x3D;&quot;#project-ideas&quot;&gt;more ideas below&lt;/a&gt;) will likely be related to one of those areas.&lt;/p&gt;
&lt;p&gt;Other job responsibilites include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collaborating with the general public in an open-source environment&lt;/li&gt;
&lt;li&gt;Addressing issues and solving bugs/problems expediently&lt;/li&gt;
&lt;li&gt;Writing easily readable code and documenting it well&lt;/li&gt;
&lt;li&gt;Meeting with other Theseus OS developers, Rust developers, and Futurewei team members&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#location-and-more&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;location-and-more&quot;&gt;&lt;/a&gt;Location and more&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fully remote&lt;/li&gt;
&lt;li&gt;Flexible work hours
&lt;ul&gt;
&lt;li&gt;Ideally 2+ hours of daily overlap with the US Pacific time zone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Work-life balance is highly valued and respected&lt;/li&gt;
&lt;li&gt;Required equipment: any standard PC capable of running Linux/Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#compensation-and-term&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;compensation-and-term&quot;&gt;&lt;/a&gt;Compensation and Term&lt;/h3&gt;
&lt;p&gt;$45-$75 USD per hour (approx. $7500-$12,000 USD monthly), commensurate with experience.&lt;/p&gt;
&lt;p&gt;The initial employment term is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3-4 months if full-time (~40 hours per week)&lt;/li&gt;
&lt;li&gt;6-9 months if part-time (~20 hours per week)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Terms can be extended if the candidate performs well.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#eligibility&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;eligibility&quot;&gt;&lt;/a&gt;Eligibility&lt;/h3&gt;
&lt;p&gt;Theseus is a U.S.-based organization but &lt;em&gt;does not&lt;/em&gt; require citizenship, permanent residency, or work visa/authorization.&lt;/p&gt;
&lt;p&gt;Anyone from any country is welcome to apply, including but not limited to students, professionals, open-source developers, hobbyists, and more.
If in the U.S., you will be hired as a standard 1099 independent contractor, as with typical freelance work.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#desired-skills&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;desired-skills&quot;&gt;&lt;/a&gt;Desired Skills&lt;/h3&gt;
&lt;p&gt;The ideal candidate would have experience with at least one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Systems programming languages
&lt;ul&gt;
&lt;li&gt;Rust preferred&lt;/li&gt;
&lt;li&gt;C, C++, or Assembly appreciated&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Operating Systems concepts
&lt;ul&gt;
&lt;li&gt;Multithreading and concurrency&lt;/li&gt;
&lt;li&gt;Memory management, virtual memory&lt;/li&gt;
&lt;li&gt;Architectural knowledge, e.g., ARM/x86&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic compiler or programming language concepts
&lt;ul&gt;
&lt;li&gt;Type safety, memory safety&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WebAssembly, sandboxing, software isolation&lt;/li&gt;
&lt;li&gt;Source code versioning via &lt;code&gt;git&lt;/code&gt; and the general GitHub workflow&lt;/li&gt;
&lt;li&gt;Working independently in a self-driven context&lt;/li&gt;
&lt;li&gt;Clear communication and technical writing skills (for documentation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you&#x27;re not an expert in these areas, don&#x27;t worry! You&#x27;ll pick up any necessary skills while working with us. As academics at heart, we love teaching these concepts, and it&#x27;s always exciting to watch new OS concepts click.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#what-youll-learn&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;what-youll-learn&quot;&gt;&lt;/a&gt;What You&#x27;ll Learn&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Deep knowledge of how operating systems work under the hood&lt;/li&gt;
&lt;li&gt;Expertise in the Rust programming language&lt;/li&gt;
&lt;li&gt;How to write &lt;strong&gt;&lt;em&gt;safe&lt;/em&gt;&lt;/strong&gt;, easy-to-read, and robust code&lt;/li&gt;
&lt;li&gt;Experience with navigating/understanding large projects&lt;/li&gt;
&lt;li&gt;Skills for producing good documentation&lt;/li&gt;
&lt;li&gt;Best practices for contributing to public open-source projects&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#project-ideas&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;project-ideas&quot;&gt;&lt;/a&gt;Project Ideas&lt;/h3&gt;
&lt;p&gt;Projects are fairly open-ended and flexible; the topic is ultimately up to you, but should ideally relate to one of Theseus&#x27;s current development goals. We do encourage you to work on something that interests you personally.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#x27;ve ever caught yourself thinking &lt;em&gt;“I&#x27;ve always wanted to know how XYZ works in an OS”&lt;/em&gt; then this is where you&#x27;ll shine (and get paid to follow your curiosity!).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your project(s) will expand or improve upon the existing functionality of Theseus or add new features entirely. We have an extensive list of exciting project ideas that you can tackle or use as inspiration for an idea of your own:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extending support for running WebAssembly (WASM) on Theseus
&lt;ul&gt;
&lt;li&gt;Supporting more WASM interfaces, e.g., WASI extensions&lt;/li&gt;
&lt;li&gt;Improving WASM performance (e.g., with &lt;code&gt;wasmtime&lt;/code&gt;) atop Theseus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating a generic universal driver abstraction for cross-OS driver reuse
&lt;ul&gt;
&lt;li&gt;Ask us about &lt;code&gt;WASI-dd&lt;/code&gt;: a future WASM-based interface for reusing drivers on any WASM-compliant OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deeper graphics support and a better graphics stack
&lt;ul&gt;
&lt;li&gt;Supporting WASM+WebGL workloads&lt;/li&gt;
&lt;li&gt;Creating a new more featureful window manager or compositor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Legacy compatibility: improving Theseus&#x27;s implementation of Rust&#x27;s &lt;code&gt;std&lt;/code&gt; library and/or &lt;code&gt;libc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Porting Theseus to another architecture, e.g., ARM &lt;code&gt;aarch64&lt;/code&gt;, RISC-V&lt;/li&gt;
&lt;li&gt;Driver development for additional devices and peripherals
&lt;ul&gt;
&lt;li&gt;Storage devices, GPUs, USB devices, audio chips, etc.&lt;/li&gt;
&lt;li&gt;Proper power management, ACPI shutdown, device/CPU suspend &amp;amp; resume&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language-level: deeper integration and support for Rust&#x27;s async/await syntax&lt;/li&gt;
&lt;li&gt;See &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/wiki&quot;&gt;more project ideas here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#about-us-our-vision-and-culture&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;about-us-our-vision-and-culture&quot;&gt;&lt;/a&gt;About Us: our Vision and Culture&lt;/h3&gt;
&lt;p&gt;We strongly believe that Theseus OS is well-positioned to be the next great system for supporting complex dynamic workloads on both low-end and high-end embedded systems, datacenter servers, and any other single-operator computing environment &lt;strong&gt;where safety and efficient performance are key&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Theseus began as a research-oriented OS that focused on investigating the benefits of a unique OS structure and novel methods of state/resource management.&lt;/li&gt;
&lt;li&gt;Theseus has received positive feedback from experts in academia, appearing in top-tier conferences like the Symposium on Operating Systems and Principles (SOSP) in 2020.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are in the process of transitioning Theseus from a research prototype to a more usable fully-fledged operating system that will support arbitrary workloads, both existing popular applications and libraries as well as up-and-coming interfaces, e.g., WASM and its interface extensions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;However, we still retain that academic culture and feel of fearlessly exploring wild and wacky ideas without concern for commercial usability.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As with most open-source projects, the work environment is casual and chill. While we do expect you to make progress, we are also all too familiar with the challenges inherent in OS development and are very understanding of unforeseen delays or complications. We&#x27;ll be there to guide you to overcome any difficulties/setbacks along the way.&lt;/p&gt;
&lt;p&gt;You&#x27;ll work directly with Kevin Boos, the creator of Theseus OS and founder of Theseus Systems. Kevin is the full-time lead developer and will work personally with you to specify your project, implement your design, and foster knowledge of the fundamentals of Rust, Theseus, and OS functionality.&lt;/p&gt;
&lt;p&gt;You&#x27;ll also interact with a variety of other contributors, such as technical managers and experts from Futurewei or systems professors and PhD students from Yale University and other academic institutions.&lt;/p&gt;
&lt;p&gt;Theseus OS is a fully open-source project that welcomes contributions from anyone. Thus, you may interact with the Rust or OS community at large, both of which are often recognized as the most welcoming of all online developer communities. Rustaceans are super friendly!&lt;/p&gt;
&lt;p&gt;We recognize your time is valuable: meetings are kept to a minimum! That being said, Kevin and others are always happy to meet with you and help you out at any time of day. Project guidance can be as hands-on or hands-off as you like, according to your preferred work style.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align&#x3D;&quot;center&quot;&gt;&lt;/th&gt;
&lt;th align&#x3D;&quot;center&quot;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align&#x3D;&quot;center&quot;&gt;&lt;img src&#x3D;&quot;/images/2022-posts/kevin-boos.png&quot; alt&#x3D;&quot;Photo of Kevin Boos&quot; title&#x3D;&quot;Kevin Boos&quot; /&gt;&lt;/td&gt;
&lt;td align&#x3D;&quot;center&quot;&gt;&lt;img src&#x3D;&quot;/images/2022-posts/puma.png&quot; alt&#x3D;&quot;Photo of Puma&quot; title&#x3D;&quot;Puma the Pup&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align&#x3D;&quot;center&quot;&gt;&lt;div align&#x3D;&quot;center&quot;&gt; &lt;strong&gt;Kevin Boos&lt;/strong&gt; &lt;br&gt; Founder &amp;amp; Creator of Theseus &lt;br&gt; PhD, Rice University &lt;/div&gt;&lt;/td&gt;
&lt;td align&#x3D;&quot;center&quot;&gt;&lt;div align&#x3D;&quot;center&quot;&gt; &lt;strong&gt;Puma&lt;/strong&gt; &lt;br&gt; Chief Morale Officer &lt;br&gt; PhD in Ball Fetching, sneaky Zoom ninja &lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thanks, we look forward to meeting you!&lt;/p&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
    <entry>
        <title>Progress porting wasmtime-runtime to Theseus</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2022/02/03/wasmtime-progress-update.html" type="text/html" title="Progress porting wasmtime-runtime to Theseus" />
        <published>2022-02-03T00:00:00+00:00</published>
        <updated>2022-02-03T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2022/02/03/wasmtime-progress-update.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2022/02/03/wasmtime-progress-update.html">&lt;h2&gt;&lt;a href&#x3D;&quot;#porting-wasmtime-runtime-the-key-wasmtime-crate&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;porting-wasmtime-runtime-the-key-wasmtime-crate&quot;&gt;&lt;/a&gt;Porting &lt;code&gt;wasmtime-runtime&lt;/code&gt;, the key &lt;code&gt;wasmtime&lt;/code&gt; crate&lt;/h2&gt;
&lt;p&gt;A &lt;a href&#x3D;&quot;2021-12-31-November-December-Update-WASM.md&quot;&gt;previous post from late 2021&lt;/a&gt; chronicled our ongoing journey to port &lt;code&gt;wasmtime&lt;/code&gt; to Theseus.
While our bottom-up approach got off to a strong start, we quickly encountered our first major challenge when examining the &lt;code&gt;wasmtime-runtime&lt;/code&gt; crate, as it contains many dependencies on platform-specific and legacy system interfaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unix-like memory mapping and protection&lt;/li&gt;
&lt;li&gt;Signal/trap handling&lt;/li&gt;
&lt;li&gt;Thread-local storage&lt;/li&gt;
&lt;li&gt;Stack introspection and backtracing&lt;/li&gt;
&lt;li&gt;File and I/O abstractions&lt;/li&gt;
&lt;li&gt;Exception (panic) handling and unwinding resumption&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This post describes our progress over a few weeks of working to add these features to Theseus in order to support &lt;code&gt;wasmtime-runtime&lt;/code&gt;&#x27;s many complex dependencies.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#porting--reorganizing-third-party-libraries&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;porting--reorganizing-third-party-libraries&quot;&gt;&lt;/a&gt;Porting &amp;amp; reorganizing third-party libraries&lt;/h3&gt;
&lt;p&gt;We first re-organized Theseus&#x27;s repository to include two folders for third-party crates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;libs/&lt;/code&gt;: contains standalone crates that don&#x27;t depend on Theseus, but can be used by Theseus and others.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ports/&lt;/code&gt;: contains crates that have been ported to depend directly on Theseus-specific crates, e.g., those in &lt;code&gt;kernel/&lt;/code&gt; and are thus not standalone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main features ported over the past couple of months (early winter 2021-2022) are shown in the table below:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Crate / Feature&lt;/th&gt;
&lt;th&gt;Summary&lt;/th&gt;
&lt;th&gt;Reason Needed for &lt;code&gt;wasmtime-runtime&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;libc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Rust wrapper around the actual platform-specific &lt;code&gt;libc&lt;/code&gt; implementation&lt;/td&gt;
&lt;td&gt;Used to establish memory mappings and register signal handlers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;region&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Cross-platform APIs for virtual memory functions&lt;/td&gt;
&lt;td&gt;Used to allocate large chunks of memory and remap/protect memory regions as exec/read/write as needed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TLS&lt;/td&gt;
&lt;td&gt;Thread-Local Storage areas&lt;/td&gt;
&lt;td&gt;Used for &lt;code&gt;thread_local!()&lt;/code&gt; macro, which is needed to handle traps and stack unwinding upon exceptions that occur while executing native code that was JIT-compiled from a WASM binary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;object&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Helper crate for reading/writing object files, e.g., ELF&lt;/td&gt;
&lt;td&gt;Used to read object files generated by &lt;code&gt;cranelift&lt;/code&gt;&#x27;s backend and to manage unwind info&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#porting-libc-to-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;porting-libc-to-theseus&quot;&gt;&lt;/a&gt;Porting &lt;code&gt;libc&lt;/code&gt; to Theseus&lt;/h4&gt;
&lt;p&gt;Support for a minimal subset of &lt;code&gt;libc&lt;/code&gt; functionality has been an ongoing but low-priority effort, mostly for two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Running C code directly on Theseus is inherently unsafe, as C is not a safe language and can thus violate Theseus&#x27;s language safety-based isolation and resource usage guarantees.&lt;/li&gt;
&lt;li&gt;No crates that Theseus depends on have needed an underlying &lt;code&gt;libc&lt;/code&gt;, thus Theseus as a platform did not need to offer one... until now.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Theseus&#x27;s libc implementation is called &lt;code&gt;tlibc&lt;/code&gt;. which is described in &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/book/c/programs.html&quot;&gt;this book chapter&lt;/a&gt;.
So far it has been loosely based on the Redox project&#x27;s &lt;code&gt;relibc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our efforts of late were focused on supporting &lt;code&gt;mmap&lt;/code&gt; for POSIX-style memory mappings, which Theseus has traditionally eschewed because they are unsafe and poorly-designed from a state management perspective&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.
In the future, we also may support POSIX-style signal handlers, but for now we have chosen to re-implement &lt;code&gt;wasmtime&lt;/code&gt;&#x27;s signal handling directly in safe Rust atop Theseus rather than going through an unsafe &lt;code&gt;libc&lt;/code&gt; FFI boundary for no good reason.&lt;/p&gt;
&lt;p&gt;The bulk of the &lt;code&gt;mmap&lt;/code&gt; implemenation for &lt;code&gt;tlibc&lt;/code&gt; was added in &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/fffda853e71b5a0d7b20b850297962227e592850&quot;&gt;commit fffda85&lt;/a&gt;.
The key aspects of this are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tlibc&lt;/code&gt; exposes a POSIX-style &lt;code&gt;mmap()&lt;/code&gt; function that calls Theseus APIs to instantiate new &lt;code&gt;MappedPages&lt;/code&gt; objects, and then saves them in a private list so that they aren&#x27;t dropped until the corresponding &lt;code&gt;munmap()&lt;/code&gt; call is invoked.
&lt;ul&gt;
&lt;li&gt;This is required because Theseus&#x27;s abstraction of a virtual memory mapping, &lt;code&gt;MappedPages&lt;/code&gt;, is auto-unmapped upon &lt;code&gt;drop&lt;/code&gt; to guarantee safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Currently, &lt;code&gt;mlock&lt;/code&gt; and &lt;code&gt;munlock&lt;/code&gt; are dummy functions because Theseus doesn&#x27;t perform any swapping or paging to disk.&lt;/li&gt;
&lt;li&gt;Memory protection (&lt;code&gt;mprotect&lt;/code&gt;) is offered, but is currently limited because Theseus forces all current memory mappings to be marked as &amp;quot;present&amp;quot; in the page table.
&lt;ul&gt;
&lt;li&gt;Thus, stripping read permissions from a mapping technically works, but it violates the guarantees of the &lt;code&gt;MappedPages&lt;/code&gt; type, i.e., the mapping is present and valid for the entire lifetime of a &lt;code&gt;MappedPages&lt;/code&gt; object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While we were at it, we went even further with additional improvements to &lt;code&gt;theseus_cargo&lt;/code&gt;, &lt;code&gt;libc&lt;/code&gt;, and &lt;code&gt;tlibc&lt;/code&gt; to &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/870fb246af68d02be7981374687b80c1429f48eb&quot;&gt;facilitate integration of Rust and C code&lt;/a&gt; atop Theseus.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each time we implement a new feature in &lt;code&gt;tlibc&lt;/code&gt;, we must also update
&lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/d0fbcd0e11d56183bb306d43430dc65d4d640869&quot;&gt;Here&#x27;s an example of that for &lt;code&gt;mmap&lt;/code&gt;&lt;/a&gt;, with some testing functions included.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;theseus_cargo&lt;/code&gt; now supports building out-of-tree components &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/a685e062848d3b1522b2b962c21f51facb25726e&quot;&gt;that depend on both Rust and C code&lt;/a&gt;, e.g., native libraries.
&lt;ul&gt;
&lt;li&gt;It also now supports building &lt;code&gt;rlib&lt;/code&gt; and &lt;code&gt;staticlib&lt;/code&gt; crate types.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We added &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/4b83e95cf128a0ecd67a6c5de39f18f8bb317048&quot;&gt;basic &lt;code&gt;stdio&lt;/code&gt; features to &lt;code&gt;tlibc&lt;/code&gt;&lt;/a&gt;, e.g., for &lt;code&gt;printf&lt;/code&gt;, which is useful for testing purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;In summary, we fixed all the issues with &lt;code&gt;tlibc&lt;/code&gt;, &lt;code&gt;libc&lt;/code&gt;, and &lt;code&gt;theseus_cargo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, Rust and C code (both in-tree and out-of-tree components) can all be compiled and loaded/linked together in Theseus.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#porting-region-to-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;porting-region-to-theseus&quot;&gt;&lt;/a&gt;Porting &lt;code&gt;region&lt;/code&gt; to Theseus&lt;/h4&gt;
&lt;p&gt;With &lt;code&gt;tlibc&lt;/code&gt; now supporting basic &lt;code&gt;libc&lt;/code&gt; memory mapping functions, porting the &lt;code&gt;region&lt;/code&gt; crate was fairly straightforward.&lt;/p&gt;
&lt;p&gt;However, importantly, we chose to &lt;em&gt;not&lt;/em&gt; force &lt;code&gt;region&lt;/code&gt; on Theseus to depend on &lt;code&gt;tlibc&lt;/code&gt;, mainly because it would introduce another layer of unsafety.
The &lt;a href&#x3D;&quot;https://github.com/theseus-os/region-rs/commit/b4de9a22b5c3c8a1e2b9f2834fe33df27472891e#diff-761c91258f20f42f7145ee39c2cbac444849c5a5285f5d9695a3aeea4d27c6d5&quot;&gt;primary implementation of &lt;code&gt;alloc&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; are here&lt;/a&gt;, which are similar to the &lt;code&gt;mmap()&lt;/code&gt; implemenation in &lt;code&gt;tlibc&lt;/code&gt;.
We also must express the &lt;a href&#x3D;&quot;https://docs.rs/region/3.0.0/region/struct.Protection.html&quot;&gt;&lt;code&gt;region::Protection&lt;/code&gt;&lt;/a&gt; type in terms of Theseus&#x27;s page table &lt;code&gt;EntryFlags&lt;/code&gt;, which was generally straightforward.&lt;/p&gt;
&lt;p&gt;The one tricky part of &lt;code&gt;region&lt;/code&gt; that we disliked is &lt;a href&#x3D;&quot;https://docs.rs/region/3.0.0/region/struct.QueryIter.html&quot;&gt;&lt;code&gt;QueryIter&lt;/code&gt;&lt;/a&gt;, which allows the caller to query &lt;em&gt;all&lt;/em&gt; virtual memory areas across the entire current virtual address space to find ones that span or overlap with a certain range of addresses.&lt;br /&gt;
This is problematic for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Theseus&#x27;s state management philosophy dictates that it does not maintain a centralized list of all memory mappings, so there&#x27;s nothing to iterate over by default.&lt;/li&gt;
&lt;li&gt;Theseus provides a very safe and clear API for interacting with memory mappings, which &lt;a href&#x3D;&quot;https://docs.rs/region/3.0.0/region/fn.query_range.html&quot;&gt;&lt;code&gt;region::query_range()&lt;/code&gt;&lt;/a&gt; completely ignores because it assumes a POSIX-style virtual memory API.&lt;/li&gt;
&lt;li&gt;Theseus strives to prevent &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use&quot;&gt;TOCTTOU attacks&lt;/a&gt; by avoiding the concept of a &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Handle_(computing)&quot;&gt;handles that point to a resource indirectly&lt;/a&gt;. By design (and by necessity atop conventional OSes), &lt;code&gt;QueryIter&lt;/code&gt; separates the &amp;quot;time of check&amp;quot; from the &amp;quot;time of use&amp;quot;, leading to potentially confusing behavior and errors in which a memory region returned from a query no longer exists by the time one attempts to use it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the end, our solution was to allow &lt;code&gt;QueryIter&lt;/code&gt; to expose and return &lt;strong&gt;only references to the memory areas already created by the &lt;code&gt;region&lt;/code&gt; crate itself&lt;/strong&gt;. This strives to mitigate safety issues that could arise by exposing &lt;em&gt;all&lt;/em&gt; memory regions maintained by Theseus to higher-level Rust code that may use them unsafely through the &lt;code&gt;region&lt;/code&gt; APIs.
Hopefully this feature restriction doesn&#x27;t pose a problem in the future.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#supporting-thread-local-storage-on-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;supporting-thread-local-storage-on-theseus&quot;&gt;&lt;/a&gt;Supporting Thread-Local Storage on Theseus&lt;/h3&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Thread-local_storage&quot;&gt;Thread-Local Storage (TLS)&lt;/a&gt; allows one to declare a variable that will be instantiated on a per-thread basis, with each thread having its own local copy that other threads cannot access.
This is useful for many reasons, e.g., programming conveniencce, performant access to thread-specific data without locking, etc.
Our motivation for finally supporting it in its ultimate flexible form -- the ELF standard TLS areas -- stemmed from &lt;code&gt;wasmtime-runtime&lt;/code&gt;, which uses it in myriad ways.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: previously, Theseus offered a cheap imitation of TLS using the GS register to store limited, targeted data about each task, but it wasn&#x27;t usable by any applications, libraries, or even other non-&lt;code&gt;task&lt;/code&gt; kernel crates.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We implemented TLS support &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/3e6c50a0a45560057c6a35db4ce220760e362962&quot;&gt;across several commits&lt;/a&gt;.
This was a suprisingly complex and tricky implementation that required a lot of trial-and-error experimentation to determine how to correctly layout each TLS object in the per-task TLS area.&lt;/p&gt;
&lt;p&gt;Another complicating factor is that Theseus loads and links all crates at runtime, which means that our implementation &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/fd1f11d99f1b4252abb35fffe7ae45f9f7ca616b&quot;&gt;must support both statically-linked TLS areas from the base kernel image as well as newcomers found in dynamically-loaded crates&lt;/a&gt;.
There are a lot of tradeoffs herein as it relates to reserving and allocating offset ranges in the TLS space for TLS data sections, tracking TLS data sections per namespace, per crate, etc -- but these are best saved for a separate post about TLS.&lt;/p&gt;
&lt;p&gt;We went a step further by implementing &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/dd62aff423e1deceed503e3341827ba1e04dce79&quot;&gt;Rust&#x27;s &lt;code&gt;thread_local!()&lt;/code&gt; macro&lt;/a&gt; for any Theseus crate, which offers lazy dynamic initialization and cleanup of TLS areas.
This overcomes the limitations of standard ELF TLS sections, which behave like &lt;code&gt;static&lt;/code&gt; globals in Rust: they are &lt;code&gt;const&lt;/code&gt;-initialized and never dropped.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#porting-the-object-crate-to-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;porting-the-object-crate-to-theseus&quot;&gt;&lt;/a&gt;Porting the &lt;code&gt;object&lt;/code&gt; crate to Theseus&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;object&lt;/code&gt; crate is standalone and doesn&#x27;t need to be ported to Theseus specifically, thus we can simply port it to &lt;code&gt;no_std&lt;/code&gt; and place it in Theseus&#x27;s &lt;code&gt;libs/&lt;/code&gt; directory.
The only real difficulty here is that while &lt;code&gt;object&lt;/code&gt; &lt;em&gt;does&lt;/em&gt; support &lt;code&gt;no_std&lt;/code&gt;,  no previous users of &lt;code&gt;object&lt;/code&gt; needed to &lt;em&gt;write&lt;/em&gt; to an object file in a &lt;code&gt;no_std&lt;/code&gt; environment.
Thinking about it, we do agree that&#x27;s kind of weird, but Theseus is just like that sometimes. 😊&lt;/p&gt;
&lt;p&gt;Once we convinced the maintainers of &lt;code&gt;object&lt;/code&gt; that this feature was necessary, the changes required to do so weren&#x27;t very involved.
It boiled down to a rearrangement of &lt;code&gt;object&lt;/code&gt;&#x27;s Cargo features and configuration blocks: check out the &lt;a href&#x3D;&quot;https://github.com/gimli-rs/object/pull/400&quot;&gt;PR we submitted (that was accepted)&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#miscellaneous-improvements&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;miscellaneous-improvements&quot;&gt;&lt;/a&gt;Miscellaneous Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/05f1213a562639be74aa7ceaeef301a23e86e97a&quot;&gt;improved the page allocator&lt;/a&gt; to allow it to lazily merge contiguous freed chunks of pages.
&lt;ul&gt;
&lt;li&gt;This happens lazily after an allocation request first fails; it is possible to also do it proactively in &lt;code&gt;AllocatedPages::drop()&lt;/code&gt;, but that makes deallocation more expensive.&lt;/li&gt;
&lt;li&gt;Needed for loading C object files or static libraries with entry points at a fixed address, e.g., the default entry point of &lt;code&gt;0x400000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Future work: support building and loading position-independent executables (PIE, and PIC). This is required to simultaneously load multiple C executables at the same fixed address, because Theseus only offers a single virtual address space.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;See our &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/book/misc/papers_presentations.html&quot;&gt;OSDI 2020 paper&lt;/a&gt; for an in-depth discussion of this. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
    <entry>
        <title>WASM has landed!</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2022/01/25/WASM-Has-Landed.html" type="text/html" title="WASM has landed!" />
        <published>2022-01-25T00:00:00+00:00</published>
        <updated>2022-01-25T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2022/01/25/WASM-Has-Landed.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2022/01/25/WASM-Has-Landed.html">&lt;h2&gt;&lt;a href&#x3D;&quot;#running-wasm--wasi-modules-in-a-safe-os-kernel&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;running-wasm--wasi-modules-in-a-safe-os-kernel&quot;&gt;&lt;/a&gt;Running WASM + WASI modules in a safe OS kernel&lt;/h2&gt;
&lt;p&gt;🚀🚀 WASM has now landed in Theseus! 🚀🚀&lt;/p&gt;
&lt;p&gt;With &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/f4aa715f0fc706a0e3b0f3f21057338c0b295ffb&quot;&gt;PR #472&lt;/a&gt; being merged in, Theseus&#x27;s main branch allows you to execute WASM modules (as precompiled WASM binaries) that use both the core WASM specification and basic WASI extensions.&lt;/p&gt;
&lt;p&gt;See our &lt;a href&#x3D;&quot;2021-12-31-November-December-Update-WASM.md&quot;&gt;previous blog post&lt;/a&gt; for more about this effort.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-to-use-and-run-wasm-on-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-to-use-and-run-wasm-on-theseus&quot;&gt;&lt;/a&gt;How to use and run WASM on Theseus&lt;/h3&gt;
&lt;p&gt;Theseus doesn&#x27;t yet support running an actual compiler, so you first need to download a pre-compiled WASM binary on the Theseus command line or package one up into the OS image itself during build time. We describe the latter approach below.&lt;/p&gt;
&lt;p&gt;Theseus&#x27;s build tooling now supports including arbitrary &amp;quot;extra files&amp;quot; in the generated OS &lt;code&gt;.iso&lt;/code&gt; image; &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/tree/theseus_main/extra_files&quot;&gt;click here to read more&lt;/a&gt; about that feature.
All you have to do is put whatever files you want included into the &lt;code&gt;extra_files/&lt;/code&gt; directory in the source code repository.
Presto-magic-change-o, these extra files will be automatically loaded into Theseus&#x27;s in-memory filesystem upon boot, in the &lt;code&gt;/extra_files&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Once you have a WASM binary, running it is easy with the &lt;code&gt;wasm&lt;/code&gt; command:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-sh&quot;&gt;wasm /path/to/wasm/binary [args]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For example, try out the &lt;code&gt;exorbitant&lt;/code&gt; interactive calculator like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-sh&quot;&gt;wasm /extra_files/wasm/exorbitant.wasm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src&#x3D;&quot;/images/2022-posts/exorbitant-wasm.png&quot; alt&#x3D;&quot;exorbitant demo&quot; /&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Our work on &lt;code&gt;wasmtime&lt;/code&gt; atop Theseus is still ongoing. Please check back for more updates soon!&lt;/p&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
    <entry>
        <title>2021: A Year in Review</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2022/01/13/Theseus-Year-In-Review-2021.html" type="text/html" title="2021: A Year in Review" />
        <published>2022-01-13T00:00:00+00:00</published>
        <updated>2022-01-13T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2022/01/13/Theseus-Year-In-Review-2021.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2022/01/13/Theseus-Year-In-Review-2021.html">&lt;h2&gt;&lt;a href&#x3D;&quot;#theseuss-first-full-year&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theseuss-first-full-year&quot;&gt;&lt;/a&gt;Theseus&#x27;s First Full Year&lt;/h2&gt;
&lt;p&gt;Although 2021 not the first year of Theseus development, it &lt;em&gt;was&lt;/em&gt; the first whole year in which:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Theseus was fully open-sourced and publically known to the community.&lt;/li&gt;
&lt;li&gt;Theseus received interest from academic and industry collaborators.&lt;/li&gt;
&lt;li&gt;Theseus received funding for open-source development from industry (yay!).&lt;/li&gt;
&lt;li&gt;Our focus shifted from prototyping research concepts to feature completeness, stabilization, and legacy compatibility.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thanks to all the folks who contributed, advised, and interacted with myself and the rest of the Theseus team this year!&lt;/p&gt;
&lt;p&gt;We had an explosion of interest on GitHub:
&lt;img src&#x3D;&quot;/images/2022-posts/theseus-github-sshot.png&quot; alt&#x3D;&quot;theseus-github-screenshot&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And official funding from Futurewei to continue Theseus development!
&lt;img src&#x3D;&quot;/images/2022-posts/theseus_plus_futurewei.svg&quot; alt&#x3D;&quot;Futurewei plus Theseus collab&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We look forward to another productive year!&lt;/p&gt;
&lt;p&gt;Time to get Theseus onto some real devices! &lt;sup&gt;hint hint&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#recap-major-new-developments&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;recap-major-new-developments&quot;&gt;&lt;/a&gt;Recap: major new developments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ability to build out-of-tree crates against Theseus using &lt;code&gt;theseus_cargo&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;A novel extension of cargo to support building against prebuilt dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Basic WASM execution (using &lt;code&gt;wasmi&lt;/code&gt; interpreter) with core WASI support
&lt;ul&gt;
&lt;li&gt;Coming soon!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Continuing efforts to support headless, no-graphics operation&lt;/li&gt;
&lt;li&gt;General legacy compatibility improvements, including a fuller libc implementation&lt;/li&gt;
&lt;li&gt;Generic, dynamic, and arbitrary thread-local storage (TLS), plus a Rust-like &lt;code&gt;thread_local!()&lt;/code&gt; macro&lt;/li&gt;
&lt;li&gt;Tons of documentation, plus auto-published source docs and book docs!&lt;/li&gt;
&lt;li&gt;A full redesign of ergonomic and composable traits for device I/O, plus FAT FS support&lt;/li&gt;
&lt;li&gt;Performance and ergonomics improvements to the page and frame allocators&lt;/li&gt;
&lt;li&gt;Deferred interrupt handling tasks for better device driver performance and system interactivity&lt;/li&gt;
&lt;li&gt;and many more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#thanks-to-2021s-contributors&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;thanks-to-2021s-contributors&quot;&gt;&lt;/a&gt;Thanks to 2021&#x27;s Contributors!&lt;/h3&gt;
&lt;p&gt;Beyond our usual contributors, we had several newcomers from both Yale University and the open-source community at large who generously devoted their time to make some excellent improvements to Theseus.
Our sincere thanks to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Futurewei Technologies, especially &lt;a href&#x3D;&quot;https://www.linkedin.com/in/sid-askary-21a962&quot;&gt;Sid Askary&lt;/a&gt; and &lt;a href&#x3D;&quot;https://www.linkedin.com/in/yong-he-1334902&quot;&gt;Yong He&lt;/a&gt;, for generously offering technical advice and funding for Theseus development.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/apogeeoak&quot;&gt;@apogeeoak&lt;/a&gt;, who improved documentation quality and implemented GitHub workflows to autogenerate docs.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/vikrammullick&quot;&gt;Vikram Mullick&lt;/a&gt;, who began and nearly finished support for running WASM+WASI binaries atop Theseus.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/jacob-earle&quot;&gt;Jacob Earle&lt;/a&gt;, who began support for logging output on ARM microcontrollers and a pseudo-real time scheduling algorithm for Theseus.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/joshtriplett&quot;&gt;Josh Triplett&lt;/a&gt;, who served as a valuable font of advice and sounding board for some of my wild Theseus ideas.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/phil-opp&quot;&gt;Philipp Oppermann&lt;/a&gt;, whose project &lt;a href&#x3D;&quot;https://os.phil-opp.com/&quot;&gt;Blog OS&lt;/a&gt; helped kickstart Theseus development a few years ago.&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
    <entry>
        <title>November-December 2021 Update: We have WASM liftoff!</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2021/12/31/November-December-Update-WASM.html" type="text/html" title="November-December 2021 Update: We have WASM liftoff!" />
        <published>2021-12-31T00:00:00+00:00</published>
        <updated>2021-12-31T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2021/12/31/November-December-Update-WASM.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2021/12/31/November-December-Update-WASM.html">&lt;h2&gt;&lt;a href&#x3D;&quot;#theseus-now-supports-wasm--wasi&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theseus-now-supports-wasm--wasi&quot;&gt;&lt;/a&gt;Theseus now supports WASM + WASI&lt;/h2&gt;
&lt;p&gt;Great news -- executing WASM modules atop Theseus is now working!&lt;/p&gt;
&lt;p&gt;As proposed in a &lt;a href&#x3D;&quot;2021-11-01-October-Update-WASM.md&quot;&gt;previous post&lt;/a&gt;, the initial implementation covers basic WASI system calls and uses the &lt;code&gt;wasmi&lt;/code&gt; crate to execute WASM binaries using an intepreter.&lt;/p&gt;
&lt;p&gt;Big thanks to &lt;a href&#x3D;&quot;https://github.com/vikrammullick&quot;&gt;Vikram Mullick&lt;/a&gt; for leading this effort. Our initial work was also inspired by early work from &lt;a href&#x3D;&quot;https://github.com/tomaka/redshirt&quot;&gt;redshirt&lt;/a&gt;, a WASM-based proof-of-concept system that also used &lt;code&gt;wasmi&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: this feature is not yet merged into the &lt;code&gt;theseus_main&lt;/code&gt; branch. It&#x27;s coming soon!
In the mean time, you can follow its progress in &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/pull/472&quot;&gt;PR #472&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#demos-of-running-wasm-on-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;demos-of-running-wasm-on-theseus&quot;&gt;&lt;/a&gt;Demos of running WASM on Theseus&lt;/h3&gt;
&lt;p&gt;We have a few demo applications to show basic WASM + WASI functionality.&lt;/p&gt;
&lt;p&gt;First, a classic text adventure game called &lt;a href&#x3D;&quot;https://en.wikipedia.org/wiki/Zork#Zork_and_Dungeon&quot;&gt;Zork&lt;/a&gt;. This demonstrates using stdio through WASI-defined APIs.
&lt;img src&#x3D;&quot;/images/2021-posts/wzork.png&quot; alt&#x3D;&quot;zork&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Second, a simple version of &lt;code&gt;grep&lt;/code&gt; version 2.0 compiled to WASM, which demonstrates using WASI&#x27;s filesystem I/O interface.
&lt;img src&#x3D;&quot;/images/2021-posts/wgrep.png&quot; alt&#x3D;&quot;grep&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Once WASM support is officially in the main branch, we will offer an easier command line interface for loading and executing WASM binaries.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#progress-on-porting-wasmtime-to-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;progress-on-porting-wasmtime-to-theseus&quot;&gt;&lt;/a&gt;Progress on Porting &lt;code&gt;wasmtime&lt;/code&gt; to Theseus&lt;/h2&gt;
&lt;p&gt;While the interpreted WASM project is wrapping up, the port of &lt;code&gt;wasmtime&lt;/code&gt; is just getting started.&lt;/p&gt;
&lt;p&gt;As described in &lt;a href&#x3D;&quot;https://docs.wasmtime.dev/contributing-architecture.html&quot;&gt;&lt;code&gt;wasmtime&lt;/code&gt;&#x27;s documentation&lt;/a&gt;, the project is architected as one top-level user-facing crate that re-exports and connects together key functionality from several smaller internal crates.
The top-level crate is aptly named &lt;code&gt;wasmtime&lt;/code&gt;, and it primarily exposes a safe API for interacting with WASM modules, e.g., compiling, instantiating, and invoking them.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#bottom-up-approach----off-to-a-strong-start&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;bottom-up-approach----off-to-a-strong-start&quot;&gt;&lt;/a&gt;Bottom-up approach -- off to a strong start&lt;/h3&gt;
&lt;p&gt;We have taken a bottom-up approach such that we can iteratively port each crate to the Theseus environment, building and testing them as we go.
A diagram of the key crates that we care about and need to port is below.
&lt;img src&#x3D;&quot;/images/2021-posts/wasmtime-crate-structure.png&quot; alt&#x3D;&quot;diagram of wasmtime key crates&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As such, the top-level &lt;code&gt;wasmtime&lt;/code&gt; crate will be the &lt;em&gt;last&lt;/em&gt; one that we port to Theseus.
So far, we have been able to quickly adapt the following bottom-most crates (shown in green above) to &lt;code&gt;no_std&lt;/code&gt; environments, as they are relatively standalone:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wasmparser&lt;/code&gt;: an external (non-wasmtime) tool for parsing WASM binaries&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wasmtime-types&lt;/code&gt;: definitions for core WASM types and execution concepts&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wasmtime-environ&lt;/code&gt;: support for abstract definitions of compiler environment and features, enabling easy use of the cranelift backend for JIT&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cranelift-entity&lt;/code&gt;: core data structures used by the Cranelift code generator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition, we had to modify the following crates that were dependencies of wasmtime in order to support &lt;code&gt;no_std&lt;/code&gt; environments. We submitted PRs to each crate&#x27;s upstream repository, some of which have already been accepted. Thanks to those authors/maintainers!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt;: PR to &lt;a href&#x3D;&quot;https://github.com/gimli-rs/object/pull/400&quot;&gt;allow &lt;code&gt;no_std&lt;/code&gt; environments to &lt;em&gt;write&lt;/em&gt;, not just read, object files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;more_asserts&lt;/code&gt;: a trivial PR to &lt;a href&#x3D;&quot;https://github.com/thomcc/rust-more-asserts/pull/6&quot;&gt;add &lt;code&gt;no_std&lt;/code&gt; support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crc32fast&lt;/code&gt;: a tricky fix to &lt;a href&#x3D;&quot;https://github.com/srijs/rust-crc32fast/pull/22&quot;&gt;compilation for targets that lack some SIMD hardware features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;indexmap&lt;/code&gt;: PR to &lt;a href&#x3D;&quot;https://github.com/bluss/indexmap/pull/207&quot;&gt;unify the API between &lt;code&gt;std&lt;/code&gt; and &lt;code&gt;no_std&lt;/code&gt; users&lt;/a&gt; of &lt;code&gt;indexmap&lt;/code&gt; data structures
&lt;ul&gt;
&lt;li&gt;Unfortunately, this one has been delayed due to &lt;code&gt;indexmap&lt;/code&gt;&#x27;s non-standard usage of features and auto-&lt;code&gt;std&lt;/code&gt; feature detection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#looking-forward-in-wasmtime&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward-in-wasmtime&quot;&gt;&lt;/a&gt;Looking forward in (wasm)time&lt;/h3&gt;
&lt;p&gt;The main challenge in porting &lt;code&gt;wasmtime&lt;/code&gt; to Theseus is porting the &lt;code&gt;wasmtime-runtime&lt;/code&gt; crate, which implements the majority of the runtime logic for executing WASM binaries atop a given host platform.
This crate is massive and will likely take months to complete, due to its many dependencies and robust usage of standard POSIX-like functionality that Theseus currently lacks.&lt;/p&gt;
&lt;p&gt;We&#x27;ll start by tackling the main dependencies of &lt;code&gt;wasmtime-runtime&lt;/code&gt;, most of which are based around legacy POSIX-style interfaces and traditional OS platform abstractions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unix-like memory mapping and protection&lt;/li&gt;
&lt;li&gt;Signal/trap handling&lt;/li&gt;
&lt;li&gt;Thread-local storage&lt;/li&gt;
&lt;li&gt;Stack introspection and backtracing&lt;/li&gt;
&lt;li&gt;File and I/O abstractions&lt;/li&gt;
&lt;li&gt;Exception (panic) handling and unwinding resumption&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Look for updates in the next post!&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#miscellaneous-contributions&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;miscellaneous-contributions&quot;&gt;&lt;/a&gt;Miscellaneous Contributions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kevin wrote a &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/book/subsystems/task.html&quot;&gt;new book chapter&lt;/a&gt; about how Theseus&#x27;s task management subsystem works.&lt;/li&gt;
&lt;li&gt;Fixed a &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/issues/451&quot;&gt;rare bug&lt;/a&gt; in the &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/pull/456&quot;&gt;frame allocator&lt;/a&gt;, originally identified by Ramla. Thanks to her for catching that!&lt;/li&gt;
&lt;li&gt;Fixed a classic off-by-one &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/issues/473&quot;&gt;bug&lt;/a&gt; that caused buffered &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/983532ac6dc6d7ccd69faf5c62f38e3b9760c4d6&quot;&gt;stdio reads to drop one character&lt;/a&gt; when the buffer was full. Thanks to Vikram for catching this!&lt;/li&gt;
&lt;/ul&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
    <entry>
        <title>October 2021 Update: All about WASM</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2021/11/01/October-Update-WASM.html" type="text/html" title="October 2021 Update: All about WASM" />
        <published>2021-11-01T00:00:00+00:00</published>
        <updated>2021-11-01T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2021/11/01/October-Update-WASM.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2021/11/01/October-Update-WASM.html">&lt;h2&gt;&lt;a href&#x3D;&quot;#bringing-the-wonderful-world-of-wasm-to-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;bringing-the-wonderful-world-of-wasm-to-theseus&quot;&gt;&lt;/a&gt;Bringing the Wonderful World of WASM to Theseus&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Theseus&#x27;s newest goal is to be a &lt;strong&gt;WASM-native&lt;/strong&gt; system, in which a fully-featured WASM runtime can execute in a bare metal environment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt; (WASM) is a powerful new binary instruction format that offers a &amp;quot;sandboxed&amp;quot; execution environment based on a simple machine model.
WASM&#x27;s goal is to allow code from a variety of programming languages to be easily deployed on and performantly executed within a web browser-provided environment, effectively realizing the portability dream once envisioned by Java&#x27;s bytecode format.&lt;/p&gt;
&lt;p&gt;In addition, multiple extensions to the standard help to expand WASM&#x27;s functionality beyond just what is offered by most browsers.
The most notable is &lt;a href&#x3D;&quot;https://github.com/WebAssembly/WASI&quot;&gt;WASI&lt;/a&gt;, the WebAssembly System Interface, which extends WASM&#x27;s core functionality with common system-provided features like standard I/O, filesystems, clocks and timekeeping, and more.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#why-wasm-on-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;why-wasm-on-theseus&quot;&gt;&lt;/a&gt;Why WASM on Theseus?&lt;/h3&gt;
&lt;p&gt;WASM is the solution to one of the major downsides of safe-language OSes: all components must be written in a safe language in order to uphold the isolation and safety guarantees provided by said language compiler.
This can make it tedious or impossible to support legacy components and interfaces.&lt;/p&gt;
&lt;p&gt;With a WASM runtime, Theseus could safely load and run software modules written in any arbitrary unsafe language!
All you&#x27;d need to do is compile them into a WASM module, which is quite easy thanks to most major languages supporting WASM targets.
This will also make it significantly easier to run legacy components with complex dependency chains atop Theseus, as we can bundle them all up into self-contained WASM modules with little to no external dependencies.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#how-do-we-get-there&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;how-do-we-get-there&quot;&gt;&lt;/a&gt;How do we get there?&lt;/h3&gt;
&lt;p&gt;To bring WASM to Theseus, we have started two concurrent projects:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The simple approach: use the &lt;a href&#x3D;&quot;https://github.com/paritytech/wasmi&quot;&gt;&lt;code&gt;wasmi&lt;/code&gt; intepreter crate from parity-tech&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Relatively simple, as &lt;code&gt;wasmi&lt;/code&gt; is &lt;code&gt;no_std&lt;/code&gt;-compliant and requires only minimal interfacing with the host platform in order to use it&lt;/li&gt;
&lt;li&gt;We can implement WASI system calls as needed, which acts as the glue is the glue between the WASM environment and the rest of Theseus&#x27;s subsystems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The complex approach: port the &lt;a href&#x3D;&quot;https://github.com/bytecodealliance/wasmtime&quot;&gt;&lt;code&gt;wasmtime&lt;/code&gt; WASM runtime project&lt;/a&gt; to Theseus
&lt;ul&gt;
&lt;li&gt;Massively complex with dozens of platform-specific logic and API calls&lt;/li&gt;
&lt;li&gt;Tons of legacy dependencies, e.g., libc- and POSIX-style memory management, signal handling, system calls, and usage of many Rust libstd features&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href&#x3D;&quot;https://github.com/vikrammullick&quot;&gt;Vikram Mullick&lt;/a&gt; has begun working on part 1 above as part of his senior capstone project at Yale.
&lt;a href&#x3D;&quot;https://github.com/kevinaboos&quot;&gt;Kevin Boos&lt;/a&gt; has begun working on part 2 above, and will also assist with part 1 as needed.&lt;/p&gt;
&lt;p&gt;Due to the complex nature of &lt;code&gt;wasmtime&lt;/code&gt; with its many legacy dependencies, this two-pronged split approach is quite beneficial, giving us the best of both worlds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Theseus can &amp;quot;quickly&amp;quot; get up and running with basic WASM support, allowing us to:
&lt;ul&gt;
&lt;li&gt;Experiment with running legacy components as WASM modules&lt;/li&gt;
&lt;li&gt;Begin implementing support for WASI and other key WASM interfaces, e.g., WebGL&lt;/li&gt;
&lt;li&gt;Integrate Theseus&#x27;s existing runtime loading and linking infrastructure with WASM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We can leverage the existing WASM and WASI infrastructure layers to more easily support &lt;code&gt;wasmtime&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;This will realize a ~10x performance improvement over the initial &lt;code&gt;wasmi&lt;/code&gt;, without wasting the initial &lt;code&gt;wasmi&lt;/code&gt;-based efforts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We look forward to announcing WASM support for Theseus and realizing its full potential as a WASM-native system.&lt;/p&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
    <entry>
        <title>August/September Update: A Proper Terminal Emulator</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2021/10/04/August-September-Update.html" type="text/html" title="August/September Update: A Proper Terminal Emulator" />
        <published>2021-10-04T00:00:00+00:00</published>
        <updated>2021-10-04T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2021/10/04/August-September-Update.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2021/10/04/August-September-Update.html">&lt;p&gt;As mentioned in our &lt;a href&#x3D;&quot;./2021-08-02-June-July-2021-Update.md&quot;&gt;previous update&lt;/a&gt;, we&#x27;re working to support headless operation in Theseus such that it can run in an seL4 guest VM, which doesn&#x27;t support graphical displays.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#going-headless-with-a-proper-terminal-interface&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;going-headless-with-a-proper-terminal-interface&quot;&gt;&lt;/a&gt;Going Headless with a Proper Terminal Interface&lt;/h2&gt;
&lt;p&gt;We took a three-step approach towards realizing a proper headless interactive terminal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Removing the requirement that a graphical display (e.g., VGA device) must exist for Theseus to successfully boot.
&lt;ul&gt;
&lt;li&gt;Now, if no display devices are not found, bootstrap and init can proceed, and headless operation is assumed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Devising a new input dataflow and event manager, with the serial port as the focal data source and sink.
&lt;ul&gt;
&lt;li&gt;Monitors input sources for new connections asynchronously and spawns handlers for them upon receival.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create a new terminal emulator that:
&lt;ul&gt;
&lt;li&gt;Offers abstraction layers to support both graphical &lt;em&gt;and&lt;/em&gt; non-graphical terminals.&lt;/li&gt;
&lt;li&gt;Supports conventional escape and control codes, compliant with most ANSI, VT100, and xterm.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#yet-another-serial-port-driver-redesign&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;yet-another-serial-port-driver-redesign&quot;&gt;&lt;/a&gt;Yet Another Serial Port Driver Redesign&lt;/h3&gt;
&lt;p&gt;Our existing serial port driver was very simple -- it synchronously transmitted output bytes and simply dumped input bytes.
Thus, the receive interrupt handler was trivially simple and executed quickly.&lt;/p&gt;
&lt;p&gt;However, the added complexity of doing actual work (e.g., spawning a new console/terminal instance) in the receive interrupt handler caused it to become prohibitively expensive to run.
Executing long-running operations in an interrupt handler is unacceptable: &lt;em&gt;(i)&lt;/em&gt; it prevents that CPU from doing any other work, and &lt;em&gt;(ii)&lt;/em&gt; it harms system interactiveness by preventing other interrupts from being handled.&lt;/p&gt;
&lt;p&gt;To avoid this, we used Theseus&#x27;s &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/async_channel/index.html&quot;&gt;asynchronous channels&lt;/a&gt; to establish a communication channel between the serial port interrupt handler and a separate &lt;em&gt;listener&lt;/em&gt; task.
The listener task blocks until receiving a notification from any serial port, upon which it spawns a new console and terminal instance using that serial port and an input source and an output sink.&lt;/p&gt;
&lt;p&gt;This design has one drawback: it requires &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/blob/3e805f1799964f5b63c48d7ad6a072f130256445/kernel/console/src/lib.rs#L32-L39&quot;&gt;proactively spawning a dedicated task just to listen for notifications from the serial port&lt;/a&gt;.
That led us to realize that it was time to introduce a better abstraction: deferred and/or linked interrupt handlers.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#deferred-interrupt-handlers&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;deferred-interrupt-handlers&quot;&gt;&lt;/a&gt;Deferred Interrupt Handlers&lt;/h4&gt;
&lt;p&gt;Theseus&#x27;s &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/deferred_interrupt_tasks/index.html&quot;&gt;Deferred Interrupt Handlers&lt;/a&gt; are an extension of the concept of &amp;quot;bottom half&amp;quot; and &amp;quot;top half&amp;quot; interrupt handlers&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn1&quot; id&#x3D;&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Interrupt Handler&lt;/em&gt; (aka &amp;quot;top half&amp;quot;): the short, latency-sensitive function that runs synchronously, immediately when the interrupt request is serviced. It typically does two things:
&lt;ol&gt;
&lt;li&gt;Notifies the deferred task that work is ready to be done (optionally providing details about that work), and&lt;/li&gt;
&lt;li&gt;Acknowledges the interrupt such that the hardware knows it was handled.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Deferred task&lt;/em&gt; (aka &amp;quot;bottom half&amp;quot;): the more complex function that runs in a deferred manner to handle longer operations.
&lt;ul&gt;
&lt;li&gt;Runs asynchronously in a non-interrupt context and can thus perform more long-running operations without blocking the rest of that CPU&#x27;s workloads.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Theseus&#x27;s deferred interrupt handling implementation is conceptually similar to but differs from tasklets and workqueues in Linux.
The deferred task is uniquely tied to an interrupt handler in a 1-to-1 manner upon creation and are fully type-safe; there is a direct, strongly-typed channel of communication between them&lt;sup class&#x3D;&quot;footnote-ref&quot;&gt;&lt;a href&#x3D;&quot;#fn2&quot; id&#x3D;&quot;fnref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.
The deferred task can also optionally be configured to execute immediately after the interrupt handler in order to reduce I/O device latency, thanks to scheduler integration.&lt;/p&gt;
&lt;p&gt;Our favorite side benefit of this design is that itencourages adherence to the &lt;em&gt;separation of concerns&lt;/em&gt; principle, as the interrupt handling functionality must be conciously divided into an &amp;quot;urgent&amp;quot; synchronous part and a deferred asynchronous part.&lt;/p&gt;
&lt;p&gt;With this new interrupt handling architecture, we were able to adapt the serial driver to work efficiently without having unnecessary listener tasks wasting memory and CPU cycles.
The serial port is a simple case, as the interrupt handler only need to notify the deferred task that data has been received on the port and then acknowledge the interrupt; no other data exchange is needed.
The deferred task can then read all received data from the serial port in a non-urgent manner and do anything else necessary, such as spawning new console/terminal instances.&lt;/p&gt;
&lt;h4&gt;&lt;a href&#x3D;&quot;#splitting-the-serial-port-driver&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;splitting-the-serial-port-driver&quot;&gt;&lt;/a&gt;Splitting the Serial Port Driver&lt;/h4&gt;
&lt;p&gt;Theseus&#x27;s design specifies a &lt;em&gt;tiny&lt;/em&gt; minimal kernel boot image, the &lt;code&gt;nano_core&lt;/code&gt; which must include only the bare minimum components to be able to bootstrap the OS and then dynamically load all other OS initialization components.
One of these components is the serial port driver, as it&#x27;s the only real usable choice for early boot/kernel logging in the absence of display, networking, or file support.&lt;/p&gt;
&lt;p&gt;With the above additions to the serial port driver, namely the usage of deferred interrupts and channels, the driver was becoming far too complex.
It had gone from having zero dependencies to having dozens.
That bloated the size of the &lt;code&gt;nano_core&lt;/code&gt;, thereby harming the dynamicness of Theseus.&lt;/p&gt;
&lt;p&gt;To solve this, we &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/d6b86b6c46004513735079bed47ae21fc5d4b29d&quot;&gt;split the serial port driver into two parts&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/serial_port_basic/index.html&quot;&gt;Basic driver&lt;/a&gt;: a standalone crate that exposes the &lt;code&gt;SerialPort&lt;/code&gt; type, which only offers functions to initialize, read from, and write to the device.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/serial_port/index.html&quot;&gt;Full driver&lt;/a&gt;: offers full I/O support with trait implementations, deferred interrupts, channel usage, task blocking, and more.
&lt;ul&gt;
&lt;li&gt;Wraps the basic driver&#x27;s &lt;code&gt;SerialPort&lt;/code&gt; type with additional functionality.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This design enables two previously-conflicting goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The majority of system components can access the full functionality of the serial port and use it just like any other I/O device.&lt;/li&gt;
&lt;li&gt;The kernel boot image is kept tiny with minimal dependencies whilst still being able to output logs to the serial port.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#a-complete-terminal-emulator-rewrite&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;a-complete-terminal-emulator-rewrite&quot;&gt;&lt;/a&gt;A Complete Terminal Emulator Rewrite&lt;/h3&gt;
&lt;p&gt;Finally, we began the most complicated component of true interactive headless operation: a terminal emulator.
Theseus&#x27;s existing terminal is fairly ad-hoc and doesn&#x27;t conform to any real standards; it was implemented quickly as a summer intern project and offers just enough features to run commands and display their output.
The same is true for Theseus&#x27;s &lt;code&gt;stdio&lt;/code&gt;, which is a &amp;quot;quick-n-dirty&amp;quot; inflexible implementation that uses heap buffers instead of a real file abstraction.&lt;/p&gt;
&lt;p&gt;As anyone who has dealt with this knows, terminal emulators are &lt;em&gt;exceedingly&lt;/em&gt; and unexpectedly complex.
We experimented with multiple iterations of the design, primarily centered around how best to represent each displayable &amp;quot;unit&amp;quot; or &amp;quot;cell&amp;quot; on the terminal display:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The terminal grid stores a dynamic number of elements per line, in which each element can contain either a single character or a string of characters (no matter how wide) as long as they have the same style.
&lt;ul&gt;
&lt;li&gt;Easy to output to a text backend.&lt;/li&gt;
&lt;li&gt;The most memory efficient.&lt;/li&gt;
&lt;li&gt;Calculating line wrapping and cursor navigation is overly complex because each unit may have a different columnar display width.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The terminal grid stores a dynamic number of elements per line, but each element in the line can only contain a single &lt;em&gt;character&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;Slightly less memory efficient, as it duplicates units that have the same style.&lt;/li&gt;
&lt;li&gt;Easier to calculate displayed rows and cursor movement than design 1, but still complex.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The terminal grid stores a dynamic number of elements per line, but each element corresponds to a &lt;em&gt;single displayed column&lt;/em&gt; on screen.
&lt;ul&gt;
&lt;li&gt;Requires more memory and a little bit of extra effort to support wide characters, since they must be split across more than one element.&lt;/li&gt;
&lt;li&gt;Much, much easier to calculate cursor movements, line wrapping, and display commands.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The terminal grid stores a fixed number of elements per line, equivalent to the width of the screen row; blank units are inserted to fill each linas necessary.
&lt;ul&gt;
&lt;li&gt;Very wasteful of memory, especially for short lines (common in terminal output).&lt;/li&gt;
&lt;li&gt;Trivial to calculate displayed rows and cursor movement.&lt;/li&gt;
&lt;li&gt;Very hard to re-size/re-flow the terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After multiple iterations, we settled on &lt;strong&gt;Design 3&lt;/strong&gt; above.
It selects the best set of tradeoffs in the spectrum of design points, and most importantly, simplifies the translation between on-screen coordinates and scrollback buffer coordinate.&lt;/p&gt;
&lt;p&gt;One interesting aspect of Theseus&#x27;s terminal emulator is how it&#x27;s split into multiple components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;frontend&lt;/em&gt;: a single entity responsible for handling incoming character and control/escape code bytes and determining what actions should be taken.
&lt;ul&gt;
&lt;li&gt;The frontend is also reusable as a terminal driver, &lt;code&gt;readline&lt;/code&gt; library, and line discipline layer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;backend&lt;/em&gt; abstraction: a trait that represents the various display actions that a terminal might invoke.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;backend&lt;/em&gt; implentation(s): one of multiple entity types that handles display actions to &amp;quot;render&amp;quot; the terminal output in different formats:
&lt;ul&gt;
&lt;li&gt;Graphical pixel framebuffers&lt;/li&gt;
&lt;li&gt;Classic 80x25 VGA screen with 16-color basic text display&lt;/li&gt;
&lt;li&gt;A serial port connected to a host-side pseudo-terminal&lt;/li&gt;
&lt;li&gt;A network connection or file or any other sink&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, this is still a work in progress and is not yet used for Theseus&#x27;s main terminal display.
It takes quite a lot of effort to get all the details right, but we have an MVP that supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Insert/replace mode switching&lt;/li&gt;
&lt;li&gt;Automatic CR/LF behavior with wrapping&lt;/li&gt;
&lt;li&gt;Multiple different PTY backends, e.g., &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;picocom&lt;/code&gt;, &lt;code&gt;minicom&lt;/code&gt;, etc&lt;/li&gt;
&lt;li&gt;Most ANSI escape/control codes, including colors and text styles&lt;/li&gt;
&lt;li&gt;Cursor movement and scrolling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fortunately, there are several Rust terminal emulators that serve as valuable examples, e.g., &lt;a href&#x3D;&quot;https://github.com/alacritty&quot;&gt;Alacritty&lt;/a&gt;, but they&#x27;re standalone monolithic projects that rely on an underlying graphics stack like OpenGL and are thus inappropriate for in-kernel usage.
We were able to use the excellent &lt;a href&#x3D;&quot;https://crates.io/crates/vte&quot;&gt;&lt;code&gt;vte&lt;/code&gt;&lt;/a&gt; crate from the Alacritty project though, which saved a lot of time and effort in parsing ANSI/VT100 control codes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Did you know that the &amp;quot;grid&amp;quot; of a terminal screen is indexed starting at &lt;code&gt;(1,1)&lt;/code&gt; rather than &lt;code&gt;(0,0)&lt;/code&gt; for the upper-leftmost character? &lt;sup&gt; Oh, how I wish I knew that earlier...&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#other-improvements&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-improvements&quot;&gt;&lt;/a&gt;Other Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved safety, complexity, and performance of &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/pull/419&quot;&gt;interpreting a memory region as an executable function&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Previously called &lt;code&gt;MappedPages::as_func()&lt;/code&gt;, now moved into the crate management subsystem as a member function of the &lt;code&gt;LoadedSection&lt;/code&gt; type.&lt;/li&gt;
&lt;li&gt;The new &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/crate_metadata/struct.LoadedSection.html#method.as_func&quot;&gt;&lt;code&gt;LoadedSection::as_func()&lt;/code&gt; method&lt;/a&gt; already knows both the size of the function&#x27;s section and whether the underlying memory is executable, which omits multiple runtime checks.&lt;/li&gt;
&lt;li&gt;The function interface is much simpler, as the caller need not specify any size or offset values w.r.t. the memory region.&lt;/li&gt;
&lt;li&gt;Improves safety: offers a compile-time guarantee that an executable function instance can only be obtained from a &lt;code&gt;LoadedSection&lt;/code&gt; (with proper alignment and size) rather than any chunk of executable memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Re-designed parts of the &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/df721e35221d361f8ec8fd87364133f0be0f5cde&quot;&gt;&lt;code&gt;Task&lt;/code&gt; struct to reduce lock contention&lt;/a&gt;, eliminating it in most places.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;Mutable&amp;quot; fields (those that may change after &lt;code&gt;Task&lt;/code&gt; creation) are now moved into a &lt;code&gt;TaskInner&lt;/code&gt; struct (excluding atomic fields), which allows most fields to be accessed without acquiring the lock on that &lt;code&gt;Task&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Immutable fields are kept in the &amp;quot;outer&amp;quot; &lt;code&gt;Task&lt;/code&gt; struct.&lt;/li&gt;
&lt;li&gt;We ensure atomic types are properly aligned and sized such that native atomic instructions are actually used. We realized this by switching from &lt;code&gt;atomic::Atomic&lt;/code&gt; to &lt;code&gt;crossbeam_utils::atomic::AtomicCell&lt;/code&gt;, plus static assertions that all types wrapped in &lt;code&gt;AtomicCell&lt;/code&gt; are actually eligible for native atomic access.&lt;/li&gt;
&lt;li&gt;Move a Task&#x27;s &lt;code&gt;ExitValue&lt;/code&gt; out of its &lt;code&gt;RunState&lt;/code&gt; enum so that the &lt;code&gt;RunState&lt;/code&gt; enum can be accessed atomically and independently of an &lt;code&gt;ExitValue&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;runstate&lt;/code&gt; and &lt;code&gt;running_on_cpu&lt;/code&gt; fields of &lt;code&gt;Task&lt;/code&gt; are now atomically accessible in a lock-free manner, allowing us to block/unblock tasks in lock-free contexts, e.g., within an interrupt handler.&lt;/li&gt;
&lt;li&gt;As more &lt;code&gt;Task&lt;/code&gt; fields are now readable without locking, we can remove all now-unnecessary unsafe statements from the &lt;code&gt;scheduler&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;section class&#x3D;&quot;footnotes&quot;&gt;
&lt;ol&gt;
&lt;li id&#x3D;&quot;fn1&quot;&gt;
&lt;p&gt;Other terminology is often used, including &amp;quot;first-level&amp;quot; and &amp;quot;second-level&amp;quot; interrupt handlers, or &amp;quot;hard&amp;quot; and &amp;quot;soft&amp;quot; interrupt handlers. &lt;a href&#x3D;&quot;#fnref1&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id&#x3D;&quot;fn2&quot;&gt;
&lt;p&gt;It is also possible to have a pool of deferred tasks, in which each task can be tied to multiple interrupt handlers. &lt;a href&#x3D;&quot;#fnref2&quot; class&#x3D;&quot;footnote-backref&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
    <entry>
        <title>June/July Update: Headless Operation on seL4</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2021/08/02/June-July-2021-Update.html" type="text/html" title="June/July Update: Headless Operation on seL4" />
        <published>2021-08-02T00:00:00+00:00</published>
        <updated>2021-08-02T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2021/08/02/June-July-2021-Update.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2021/08/02/June-July-2021-Update.html">&lt;h2&gt;&lt;a href&#x3D;&quot;#one-very-busy-very-hot-summer&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;one-very-busy-very-hot-summer&quot;&gt;&lt;/a&gt;One Very Busy, Very Hot Summer&lt;/h2&gt;
&lt;p&gt;In June of this year, the Seattle area hit record high temperatures of over 110°F (44°C) for three days. Ouch!&lt;/p&gt;
&lt;p&gt;We began this hot summer with the goal of enabling Theseus to run atop seL4, using both its hypervisor and VMM functionality to present Theseus with a standard &amp;quot;bare metal&amp;quot; x86 environment.
Unfortunately, we quickly discovered that while &lt;a href&#x3D;&quot;https://docs.sel4.systems/Tutorials/camkes-vm-linux.html&quot;&gt;seL4 supports ARM and x86&lt;/a&gt;, it does not yet fully support x86_64 VMMs, which is the only architecture that Theseus currently runs on.
The implementation of an x86_64 VMM was supposedly &lt;a href&#x3D;&quot;https://dornerworks.com/blog/64-bit-x86-architecture-on-sel4/&quot;&gt;completed by Dornerworks&lt;/a&gt;, but we were unable to get it to successfully run any x86_64 guest OS (but x86 VMs did work properly).
We have decided to postpone this particular effort until &lt;a href&#x3D;&quot;https://github.com/seL4/seL4/pull/324&quot;&gt;this PR&lt;/a&gt; that officially adds support for x86_64 VMMs on seL4 is accepted.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#headless-operation&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;headless-operation&quot;&gt;&lt;/a&gt;Headless operation&lt;/h2&gt;
&lt;p&gt;In the meantime, we started working towards Theseus-level support for &lt;em&gt;headless&lt;/em&gt; operation over a serial port interface.
The serial port is the only form of direct interactive access to guest VMs on seL4 (excluding network access), so it is a necessary component to debug and use Theseus therein.
It&#x27;s also useful for communicating with serial devices on other more limited platforms, e.g., our &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/pull/361&quot;&gt;WIP port of Theseus to ARM Cortex-M4 microcontrollers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previously, Theseus had two problems in this area:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All input to the shell/terminal was assumed to come from a real keyboard and mouse.&lt;/li&gt;
&lt;li&gt;The serial port was only used for basic logging output (not treated as a regular I/O device).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To achieve headless operation, we had to set two corresponding goals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Abstract the terminal and input handling to work with any I/O source, not just a physical keyboard.&lt;/li&gt;
&lt;li&gt;Enable full, bidirectional, arbitrary I/O across serial ports.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#new-io-abstractions--stateless-vs-stateful&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;new-io-abstractions--stateless-vs-stateful&quot;&gt;&lt;/a&gt;New I/O Abstractions:  Stateless vs. Stateful&lt;/h3&gt;
&lt;p&gt;As the first step towards these goals, we created &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/blob/051e52782658a3e0f11c486d8656e71da1f7ba07/kernel/io/src/lib.rs&quot;&gt;several new I/O traits&lt;/a&gt; to represent different categories of I/O.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/trait.BlockReader.html&quot;&gt;&lt;code&gt;BlockReader&lt;/code&gt;&lt;/a&gt; and &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/trait.BlockWriter.html&quot;&gt;&lt;code&gt;BlockWriter&lt;/code&gt;&lt;/a&gt; traits represent I/O streams which can be read from or written to at the granularity of a single block (as the smallest transferable chunk).&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/trait.BlockIo.html&quot;&gt;&lt;code&gt;BlockIo&lt;/code&gt;&lt;/a&gt; is a &amp;quot;parent&amp;quot; trait that specifies the size in bytes of each block
in a block-based I/O stream.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/trait.KnownLength.html&quot;&gt;&lt;code&gt;KnownLength&lt;/code&gt;&lt;/a&gt;: a separate trait that represents an I/O stream with a known length, such as a disk drive.&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/trait.ByteReader.html&quot;&gt;&lt;code&gt;ByteReader&lt;/code&gt;&lt;/a&gt;, &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/trait.ByteWriter.html&quot;&gt;&lt;code&gt;ByteWriter&lt;/code&gt;&lt;/a&gt;: traits that represent I/O streams which can be read from or written to at the granularity of an individual byte.&lt;/li&gt;
&lt;li&gt;We also provide wrapper types that allow byte-wise access atop block-based I/O streams: &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/struct.ByteReaderWrapper.html&quot;&gt;&lt;code&gt;ByteReaderWrapper&lt;/code&gt;&lt;/a&gt;, &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/struct.ByteWriterWrapper.html&quot;&gt;&lt;code&gt;ByteWriterWrapper&lt;/code&gt;&lt;/a&gt;, &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/struct.ByteReaderWriterWrapper.html&quot;&gt;&lt;code&gt;ByteReaderWriterWrapper&lt;/code&gt;&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;The &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/fn.blocks_from_bytes.html&quot;&gt;&lt;code&gt;blocks_from_bytes()&lt;/code&gt;&lt;/a&gt; function is useful for calculating the set of block-based I/O transfers that are needed to satisfy an arbitrary byte-wise transfer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Notably, these traits all offer &lt;em&gt;&lt;strong&gt;stateless&lt;/strong&gt;&lt;/em&gt; access to byte streams only, an important behavioral characteristic that helps simplify state management in Theseus.
This means that they don&#x27;t keep track of an internal offset within the stream.&lt;/p&gt;
&lt;p&gt;For example, the &lt;code&gt;ByteReader&lt;/code&gt; trait exposes only one function that requires the caller to specify at which offset the stream read should start.&lt;/p&gt;
&lt;pre&gt;&lt;code class&#x3D;&quot;language-rust&quot;&gt;fn read_at(&amp;amp;mut self, buffer: &amp;amp;mut [u8], offset: usize) -&amp;gt; Result&amp;lt;...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These traits and types also &lt;em&gt;stack&lt;/em&gt; on top of each other, e.g., you can use a &lt;code&gt;ByteReader&lt;/code&gt; to realize byte-wise access to an underlying block-based I/O device that implements &lt;code&gt;BlockReader&lt;/code&gt;.
We make this easier with trait &lt;em&gt;delegation&lt;/em&gt;, in which wrapper types &amp;quot;forward&amp;quot; the trait implementation through:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;References (&lt;code&gt;&amp;amp;dyn ByteReader&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Mutable References (&lt;code&gt;&amp;amp;mut dyn ByteReader&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Locks (&lt;code&gt;Mutex&amp;lt;ByteReader&amp;gt;&lt;/code&gt;) using the &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/struct.LockableIo.html&quot;&gt;&lt;code&gt;LockableIo&lt;/code&gt;&lt;/a&gt; type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We also offer &lt;em&gt;&lt;strong&gt;stateful&lt;/strong&gt;&lt;/em&gt; I/O types, which wrap stateless I/O streams (the above traits) to track the current offset into the I/O stream while reading or writing it.
This is similar to classic POSIX I/O interfaces, but are strongly-typed and allow for limited permissions: &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/struct.ReaderWriter.html&quot;&gt;&lt;code&gt;ReaderWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/struct.Reader.html&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt;, and &lt;a href&#x3D;&quot;https://www.theseus-os.com/Theseus/doc/io/struct.Writer.html&quot;&gt;&lt;code&gt;Writer&lt;/code&gt;&lt;/a&gt; structs.&lt;/p&gt;
&lt;p&gt;Finally, all of the above types and traits implement the &lt;code&gt;no_std&lt;/code&gt; version of &lt;code&gt;std::io::Read&lt;/code&gt;/&lt;code&gt;Write&lt;/code&gt; traits, which can come from crates like &lt;a href&#x3D;&quot;https://crates.io/crates/core_io&quot;&gt;&lt;code&gt;core_io&lt;/code&gt;&lt;/a&gt; or &lt;a href&#x3D;&quot;https://crates.io/crates/bare-io&quot;&gt;&lt;code&gt;bare_io&lt;/code&gt;&lt;/a&gt;.
This widely expands their compatibility to work with pretty much any other I/O-related code in the Rust ecosystem.&lt;/p&gt;
&lt;p&gt;For example, we used these new I/O abstractions to integrate the &lt;a href&#x3D;&quot;https://github.com/rafalh/rust-fatfs&quot;&gt;&lt;code&gt;fatfs&lt;/code&gt; Rust crate&lt;/a&gt; with Theseus, which allows Theseus to read and write the contents of a FAT filesystem on disk.
More work is required to provide a more generic file abstraction that can represent arbitrary files across any filesystem type, as Theseus&#x27;s current representation of files is quite ad-hoc and limited to in-memory filesystems.&lt;/p&gt;
&lt;h3&gt;&lt;a href&#x3D;&quot;#redesigned-serial-port-driver&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;redesigned-serial-port-driver&quot;&gt;&lt;/a&gt;Redesigned Serial Port Driver&lt;/h3&gt;
&lt;p&gt;With redesigned I/O traits, we can proceed to our second goal: improving the serial port driver.&lt;/p&gt;
&lt;p&gt;On x86 machines, there are up to 4 serial ports, but commonly only one or two are available: &lt;code&gt;COM1&lt;/code&gt; and &lt;code&gt;COM2&lt;/code&gt;.
The OS can interact with them using different I/O ports, e.g., writing bytes to &lt;code&gt;0x3F8&lt;/code&gt; and the subsequent 7 port addresses will allow you to communicate with the &lt;code&gt;COM1&lt;/code&gt; serial port.
Here are three great resources for learning more about serial port behavior and how to write a proper driver: &lt;a href&#x3D;&quot;https://en.wikibooks.org/wiki/Serial_Programming/8250_UART_Programming&quot;&gt;one&lt;/a&gt;, &lt;a href&#x3D;&quot;https://tldp.org/HOWTO/Modem-HOWTO-4.html&quot;&gt;two&lt;/a&gt;, &lt;a href&#x3D;&quot;https://wiki.osdev.org/Serial_Ports&quot;&gt;three&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The changes we needed to make are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement and activate interrupt handlers for all serial ports, such that the hardware triggers an interrupt when input bytes are received on the port.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SerialPort&lt;/code&gt; instances are no longer exclusively owned by the logger, as they must be accessible from within the serial port interrupt handler and other kernel/application crates.&lt;/li&gt;
&lt;li&gt;Implement the necessary read and write I/O traits for the &lt;code&gt;SerialPort&lt;/code&gt; type, so we can use them in all I/O stream contexts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these changes in place, Theseus is now able to read from and write to serial ports freely, as if it were any other I/O stream like a file or disk.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#other-improvements-to-theseus&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;other-improvements-to-theseus&quot;&gt;&lt;/a&gt;Other Improvements to Theseus&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Updated Theseus&#x27;s Rust compiler to version 1.54, which entailed &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/b7d62ee0197347b651e2cf1387f83c9c4a598633&quot;&gt;many changes&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactoring all inline assembly to Rust&#x27;s new &lt;code&gt;asm!()&lt;/code&gt; syntax.&lt;/li&gt;
&lt;li&gt;Complying with the restrictions on naked functions: Rust ABI is no longer allowed, and only one assembly block is permitted per naked function.&lt;/li&gt;
&lt;li&gt;Use the new &lt;a href&#x3D;&quot;https://doc.rust-lang.org/stable/core/sync/atomic/struct.AtomicUsize.html#method.compare_exchange_weak&quot;&gt;&lt;code&gt;compare_exchange_weak()&lt;/code&gt;&lt;/a&gt; family of functions, which is more efficient on some architectures (ARM) because it is allowed to spuriously fail.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refactored code for memory-related types to unify their APIs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/pull/417&quot;&gt;&lt;code&gt;VirtualAddress&lt;/code&gt; and &lt;code&gt;PhysicalAddress&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/6854306a8f2c16f3caf1332120856a0fff8de25f&quot;&gt;&lt;code&gt;Page&lt;/code&gt; and &lt;code&gt;Frame&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/commit/b09ad9bc73683397a0b16b9b53f9214bdf87c04d&quot;&gt;&lt;code&gt;PageRange&lt;/code&gt; and &lt;code&gt;FrameRange&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Book documentation: thanks to &lt;a href&#x3D;&quot;https://github.com/apogeeoak&quot;&gt;@apogeeoak&lt;/a&gt;, the Theseus Book now has clearer structure, automatic spell check, and is built and published online via GitHub Actions CI workflows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mellanox 100GiB NIC: &lt;a href&#x3D;&quot;https://github.com/Ramla-I&quot;&gt;Ramla Ijaz&lt;/a&gt; added basic support for &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus/pull/404&quot;&gt;initializing and configuring this high-performance NIC&lt;/a&gt;. Packet transmission is an ongoing work in progress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added support for parsing the ACPI &lt;code&gt;DMAR&lt;/code&gt; table, which specifies details about the system&#x27;s IOMMU.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is part of our quest to protect Theseus&#x27;s single address space execution environment from errant or malicious I/O devices that attempt to access arbitrary system memory without permission, the one final frontier in the &amp;quot;chain of safety&amp;quot; that cannot be checking by the compiler.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#contributions-to-other-open-source-projects&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;contributions-to-other-open-source-projects&quot;&gt;&lt;/a&gt;Contributions to other Open-Source Projects&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We added &lt;a href&#x3D;&quot;https://github.com/rafalh/rust-fatfs/pull/44&quot;&gt;compile-time configuration of logging flexibility&lt;/a&gt; to the &lt;code&gt;rust-fatfs&lt;/code&gt; crate.&lt;/li&gt;
&lt;li&gt;We ported the MPMC Queue crate to &lt;a href&#x3D;&quot;https://github.com/brayniac/mpmc/pull/8&quot;&gt;support &lt;code&gt;no_std&lt;/code&gt; environments&lt;/a&gt; on the latest version of Rust.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#next-steps&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;next-steps&quot;&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Now that we have flexible, generic I/O abstractions available in Theseus, the next step for achieving full headless operation is to enable a terminal/CLI to handle I/O to and from arbitrary sources, such as a serial port.&lt;/p&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
    <entry>
        <title>Hello (World!) from Theseus</title>
        <link rel="alternate" href="https://theseus-os.github.io/blog/2021/06/28/Hello-Theseus.html" type="text/html" title="Hello (World!) from Theseus" />
        <published>2021-06-28T00:00:00+00:00</published>
        <updated>2021-06-28T00:00:00+00:00</updated>
        <id>https://theseus-os.github.io/blog/2021/06/28/Hello-Theseus.html</id>
        <content type="html" xml:base="https://theseus-os.github.io/blog/2021/06/28/Hello-Theseus.html">&lt;h2&gt;&lt;a href&#x3D;&quot;#theseuss-first-blog-post&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;theseuss-first-blog-post&quot;&gt;&lt;/a&gt;Theseus&#x27;s First Blog Post&lt;/h2&gt;
&lt;p&gt;Hello, World!&lt;/p&gt;
&lt;p&gt;This is the introductory post for the Theseus OS Blog, which will be used to provide more details about the changes and developmental progress of &lt;a href&#x3D;&quot;https://github.com/theseus-os/Theseus&quot;&gt;Theseus OS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this blog, we hope to achieve the following goals:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provide an easier, more transparent way to follow changes to Theseus OS than having to pore over GitHub commits&lt;/li&gt;
&lt;li&gt;Announce major changes, feature additions, and releases&lt;/li&gt;
&lt;li&gt;Share interesting tidbits related to low-level and embedded Rust development&lt;/li&gt;
&lt;li&gt;Inspire folks in the open-source community to get involved and contribute&lt;/li&gt;
&lt;li&gt;Collect thoughts, ideas, and feedback from the Rust and OS community more directly&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#the-path-from-research-to-usability&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;the-path-from-research-to-usability&quot;&gt;&lt;/a&gt;The Path from Research to Usability&lt;/h2&gt;
&lt;p&gt;Since development began at Rice University a few years ago, our focus has been solely on pursuing designs with strong research merit rather than achieveing usability or feature-completeness.
As such, the current state of Theseus is a strange (im)balance between:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;😊 An existing set of highly-advanced system features:
&lt;ul&gt;
&lt;li&gt;Fully-safe memory management for arbitrary memory regions&lt;/li&gt;
&lt;li&gt;Compiler-assisted resource and state management&lt;/li&gt;
&lt;li&gt;Dynamic loading and linking of system components at runtime&lt;/li&gt;
&lt;li&gt;Full cuustom unwinding from high-level applications to low-level kernel entities&lt;/li&gt;
&lt;li&gt;Robust fault tolerance with a tiny core dependency set&lt;/li&gt;
&lt;li&gt;Live evolution of components at any layer/level of the system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;🙁 More &amp;quot;basic&amp;quot; features that are missing:
&lt;ul&gt;
&lt;li&gt;No true support for filesystems&lt;/li&gt;
&lt;li&gt;Interactive shell is very minimal&lt;/li&gt;
&lt;li&gt;Poor graphics support with slow compositing&lt;/li&gt;
&lt;li&gt;Lacking device support beyond mouse, keyboard, and networking&lt;/li&gt;
&lt;li&gt;Cannot run standard applications that use libc/libstd&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;That all changes today!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We&#x27;ll now focus on proving that Theseus can be useful in real-world environments (beyond just research applications) by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analyzing, auditing, and shoring up its existing functionality&lt;/li&gt;
&lt;li&gt;Fleshing out its interfaces and missing subsystems&lt;/li&gt;
&lt;li&gt;Improving stability, genericness, and usability of primary subsystems&lt;/li&gt;
&lt;li&gt;Working on legacy compatibility, including libc, Rust&#x27;s libstd, and running WASM binaries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That being said, researchers at Yale University will continue to use Theseus as a foundation for novel OS research, and their contributions may be featured here as well, when appropriate.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#funding-from-futurewei&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;funding-from-futurewei&quot;&gt;&lt;/a&gt;Funding from Futurewei&lt;/h2&gt;
&lt;p&gt;Since being published in the &lt;a href&#x3D;&quot;https://www.usenix.org/conference/osdi20/presentation/boos&quot;&gt;SOSP 2020 conference&lt;/a&gt;, Theseus has garnered a lot of interest from both fellow academic institutions as well as industry researchers.
Among the interested parties was &lt;a href&#x3D;&quot;https://futurewei.com/&quot;&gt;Futurewei Technologies&lt;/a&gt;, who reached out to our research lab at Yale University (previously at Rice University) to inquire about the future of Theseus and to determine whether it could prove useful for various important domains, such as automotive computing.&lt;/p&gt;
&lt;p&gt;Futurewei graciously offered to fund me (Kevin Boos), the creator of Theseus, to work on Theseus in a full-time capacity.
Futurewei has made a formal committment that all intellectual property and artifacts produced from work on Theseus will continue to be made open-source and remain so indefinitely, and that we will retain full control of the direction of the project.
In addition, Futurewei has committed to funding a variety of other significant projects, teams, and individuals in the Rust community, from Rust core, compiler, and language teams themselves to folks like us working on Rust-centric projects.
Together, we&#x27;re building a strong Rust ecosystem for the next generation of safe, efficient computing.&lt;/p&gt;
&lt;h2&gt;&lt;a href&#x3D;&quot;#looking-forward&quot; aria-hidden&#x3D;&quot;true&quot; class&#x3D;&quot;anchor&quot; id&#x3D;&quot;looking-forward&quot;&gt;&lt;/a&gt;Looking forward&lt;/h2&gt;
&lt;p&gt;I am both honored and excited to be able to continue developing Theseus, which was born out of my PhD dissertation research.
In the coming months, we plan to work on some fascinating topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running Theseus atop seL4 and other secure hypervisors&lt;/li&gt;
&lt;li&gt;Executing WASM + WASI binaries on Theseus&lt;/li&gt;
&lt;li&gt;Implementing support for filesystems, async/await, libc, and libstd&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading, and be on the lookout for more content soon. Feel free to contact us via email or on GitHub with comments or questions.&lt;/p&gt;
&lt;p&gt;To learn more, use the links up top to explore the Theseus Book and source code.&lt;/p&gt;
</content>

        <author>
            <name>Kevin Boos</name>
        </author>
    </entry>
    
</feed>
